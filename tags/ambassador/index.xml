<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ambassador on ServiceMesher</title>
    <link>https://www.servicemesher.com/tags/ambassador/</link>
    <description>Recent content in ambassador on ServiceMesher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 12 Sep 2018 12:38:52 +0800</lastBuildDate>
    
	<atom:link href="https://www.servicemesher.com/tags/ambassador/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>服务网格的控制平面和边缘代理的重要性</title>
      <link>https://www.servicemesher.com/blog/the-importance-of-control-planes-with-service-mesh/</link>
      <pubDate>Wed, 12 Sep 2018 12:38:52 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/the-importance-of-control-planes-with-service-mesh/</guid>
      <description>本文将带您了解为什么服务网格和边缘代理如此重要以及它们与持续交付的关系。</description>
    </item>
    
    <item>
      <title>容器、服务网格和API网关：从边缘开始</title>
      <link>https://www.servicemesher.com/blog/containers-service-mesh-and-api-gateways-it-starts-at-the-edge/</link>
      <pubDate>Thu, 21 Jun 2018 18:00:58 +0800</pubDate>
      
      <guid>https://www.servicemesher.com/blog/containers-service-mesh-and-api-gateways-it-starts-at-the-edge/</guid>
      <description>本文中提到的典型是Envoy（数据平面）、Istio（控制平面）和Ambassador（API Gateway），Matt Klein指出人们在践行微服务的道路踩到的坑大多是与debugging有关，我们应该从服务网格的边缘开始实现反向代理、负载均衡和动态路由。实现或迁移基于容器技术的云原生平台如Kubernetes才刚刚开始，Service Mesh填补了该平台中的许多空白。</description>
    </item>
    
  </channel>
</rss>